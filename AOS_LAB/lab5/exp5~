NAME
       pthread_create - thread creation

SYNOPSIS
       #include <pthread.h>

       int pthread_create(pthread_t *restrict thread,
              const pthread_attr_t *restrict attr,
              void *(*start_routine)(void*), void *restrict arg);

DESCRIPTION
       The pthread_create() function shall create a new thread, with attributes specified by attr, within a process.  If  attr  is  NULL,  the  default
       attributes shall be used. If the attributes specified by attr are modified later, the thread’s attributes shall not be affected. Upon successful
       completion, pthread_create() shall store the ID of the created thread in the location referenced by thread.

       The thread is created executing start_routine with arg as its sole argument. If the start_routine 			returns, the effect shall be as if  there  was
       an  implicit  call to pthread_exit() using the return value of start_routine as the exit status. Note 			that the thread in which main() was origi-
       nally invoked differs from this. When it returns from main(), the effect shall be as if there was an 		implicit call to exit()  using  the  return
       value of main() as the exit status.

       The signal state of the new thread shall be initialized as follows:

        * The signal mask shall be inherited from the creating thread.

        * The set of signals pending for the new thread shall be empty.

       The alternate stack shall not be inherited.

       The floating-point environment shall be inherited from the creating thread.

       If pthread_create() fails, no new thread is created and the contents of the location referenced by 		   thread are undefined.

       	If  _POSIX_THREAD_CPUTIME is defined, the new thread shall have a CPU-time clock accessible, and the 			initial value of this clock shall be set to
       	zero.

RETURN VALUE
       If successful, the pthread_create() function shall return zero; otherwise, an error number shall be 			returned to indicate the error.
-------------------------------------------------------------------------------------------------------------
NAME
       pthread_join - wait for thread termination

SYNOPSIS
       #include <pthread.h>

       int pthread_join(pthread_t thread, void **value_ptr);

DESCRIPTION
       The pthread_join() function shall suspend execution of the calling thread until the target thread  			terminates,  unless  the  target  thread  has already  terminated.  On  return from a successful 			pthread_join() call with a non-NULL value_ptr argument, the value passed to pthread_exit() by the terminating thread shall be made available in the location referenced by value_ptr. When a pthread_join() 	returns successfully,  the  target
       thread has been terminated. The results of multiple simultaneous calls to pthread_join() specifying the same target thread are undefined. If the
       thread calling pthread_join() is canceled, then the target thread shall not be detached.

       It is unspecified whether a thread that has exited but remains unjoined counts against {PTHREAD_THREADS_MAX}.

RETURN VALUE
       If successful, the pthread_join() function shall return zero; otherwise, an error number shall be returned to indicate the error.
------------------------------------------------------------------------------------------------------------
NAME
       pthread_cancel - cancel execution of a thread

SYNOPSIS
       #include <pthread.h>

       int pthread_cancel(pthread_t thread);

DESCRIPTION
       The pthread_cancel() function shall request that thread be canceled. The target thread’s cancelability state and type determines when  the  can-
       cellation takes effect. When the cancellation is acted on, the cancellation cleanup handlers for thread shall be called. When the last cancella-
       tion cleanup handler returns, the thread-specific data destructor functions shall be called  for  thread.  When  the  last  destructor  function
       returns, thread shall be terminated.

       The cancellation processing in the target thread shall run asynchronously with respect to the calling thread returning from pthread_cancel().

RETURN VALUE
       If successful, the pthread_cancel() function shall return zero; otherwise, an error number shall be returned to indicate the error.
-------------------------------------------------------------------------------------------------------------
NAME
       pthread_exit - thread termination

SYNOPSIS
       #include <pthread.h>

       void pthread_exit(void *value_ptr);

DESCRIPTION
       The pthread_exit() function shall terminate the calling thread and make the value value_ptr available to any successful join with the  terminat-
       ing  thread.  Any  cancellation  cleanup  handlers  that have been pushed and not yet popped shall be popped in the reverse order that they were
       pushed and then executed.  After all cancellation cleanup handlers have been executed, if the thread has any thread-specific  data,  appropriate
       destructor  functions  shall  be  called in an unspecified order. Thread termination does not release any application visible process resources,
       including, but not limited to, mutexes and file descriptors, nor does it perform any process-level cleanup actions, including, but  not  limited
       to, calling any atexit() routines that may exist.

       An  implicit call to pthread_exit() is made when a thread other than the thread in which main() was first invoked returns from the start routine
       that was used to create it. The function’s return value shall serve as the thread’s exit status.

       The behavior of pthread_exit() is undefined if called from a cancellation cleanup handler or destructor function that was invoked as a result of
       either an implicit or explicit call to pthread_exit().

       After a thread has terminated, the result of access to local (auto) variables of the thread is undefined. Thus, references to local variables of
       the exiting thread should not be used for the pthread_exit() value_ptr parameter value.

       The process shall exit with an exit status of 0 after the last thread has been terminated. The behavior shall be as if the implementation called
       exit() with a zero argument at thread termination time.

RETURN VALUE
       The pthread_exit() function cannot return to its caller.

